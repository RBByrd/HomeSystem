The Alarm core will be an arduino based model that will used as an IO board

There are 4 Alarm Zones and the Horn While the alarm zones have closed switches the area is secure.

Zone 1
	Front Door 
	Dining Room Window
Zone 2
	Living Room Window
Zone 3
	Bathroom Window
	4 Kitchen Windows
	Back Door
Zone 4
	Side Door
Horn
	Note: The horn will need to be driven by another power source. The IO port should control a relay to sound the Horn.

Functions

While all areas are secure and alarm system is disabled the alarm system can be actived and the horn is silent

	If zone becomes unsecure the horn chimes

		The alarm system cannot be activated

	If the alarm system is set to home

		While the alarm is set to home
			The alarm can de deactived

			if a zone 

The alarm will utilize the EEPROM of the arduino so save information.
	-Passcode
	-settings
	-Whether the system has been initailized or not
	-which zones the user would like to monitor
	-if the system has been armed.
		-this will be the most common change of the system
		-estimating 2 changes a day (alarm active, deactivate)
		-Note: An EEPROM write takes 3.3 ms to complete. The EEPROM memory has a specified life of 100,000 write/erase cycles, so you may need to be careful about how often you write to it.
		-this would give the alarm about a ~137 year lifespan.
		-Looking into the arduino forums this seems to be a per memory bit bases.
		- if that is the case then the alarm state can be moved every 99,000 changes. 
		-This would give the eeprom arduino a lifespan greater then the arduino as a whole
		-The lifespan of the arduino board is estimated to be 20-30 years. (dependent on the running conditions)
	-the alarm state address
		-this may not be needed as stated above the EEPROM should probably outlast the arduino. even at an alarm state change of 8 times a day (estimated 34 years.)


Research 
	Arduino Watchdog
	hashing



Since the arduino is a single thread of processesing the system will need to never stop in order to be able to handle multiple functions "at once." 
example (If the user wants to change the current password, We want to monitor the current zones and chime if one is breached) 
this means there will be many functions that will need to store current states in global variables instead of local ones.
This can get messy quickly if there is not solid naming and the code becomes unreadable.

State based bytes can be used to determine the current state.

concept for the settings menu
	STATEsettings
		bit [0] // the user has selected the settings button and the system is not armed
		bit [1-3] // the user has entered the correct password and is in the alarm settings menu. the reason for multiple bits is the state of the alarm menu this can scroll automatically or the user can hit next to see the next set of options
		bit [4] // the user has choosen to change the password
		bit [5] // the user has choosen to change the monitored zones
		bit [6] // the user has chosen to make a temp password
		bit [7] // the user has chosen to ?????


Current list of functions
	
	//the arduino stock functions
	setup
	loop

	//Functions made for the program

	getInteractionTime
	LCDbacklight
	LCDInitialize
	LCDmessageDisplay
	newPassword
	printZones
	RTdifference
	serialInput
	setupCheck
	setZones
	siren
	userSetup
	zoneRead




Global Variables

	//IO State Variables
	byte zoneStates[5];

	//EEProm Variables: Information that we want stored in the case of lost power the system can return to original state on startup
	int EEAddIntialized = 0;
	byte EEIntialized;
	int EEAddPassword = 4;
	int EEPassword;
	byte EEAddMonitoredZones = 8;
	byte EEMonitoredZones[5];
	int EEAddArmed = 32;
	int EEArmed;

	//Initialize lcd varialble
	LiquidCrystal_I2C lcd(0x27, 16, 2);

	//Main loop
	unsigned long RTinteraction = millis();
	bool interaction;
	int serialData;